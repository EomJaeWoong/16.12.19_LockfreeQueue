#ifndef __LOCKFREEQUEUE__H__
#define __LOCKFREEQUEUE__H__

#include "MemoryPool.h"

template <class DATA>
class CLockfreeQueue
{
public:
	struct st_NODE
	{
		DATA	Data;
		st_NODE *pNext;
	};

	struct st_END_NODE
	{
		st_NODE *pEndNode;
		__int64 iUniqueNum;
	};
public:
	/////////////////////////////////////////////////////////////////////////
	// 생성자
	//
	// Parameters: 없음.
	// Return: 없음.
	/////////////////////////////////////////////////////////////////////////
	CLockfreeQueue()
	{
		_pMemoryPool = new _pMemoryPool;

		long					_lUseSize;

		st_END_NODE			*_pHead;
		st_END_NODE			*_pTail;

		__int64				_iUniqueNumHead;
		__int64				_iUniqueNumTail;
	}

	/////////////////////////////////////////////////////////////////////////
	// 생성자
	//
	// Parameters: 없음.
	// Return: 없음.
	/////////////////////////////////////////////////////////////////////////
	virtual ~CLockfreeQueue()
	{
		
	}

	/////////////////////////////////////////////////////////////////////////
	// 현재 사용중인 용량 얻기.
	//
	// Parameters: 없음.
	// Return: (int)사용중인 용량.
	/////////////////////////////////////////////////////////////////////////
	long	GetUseSize(void);

	/////////////////////////////////////////////////////////////////////////
	// 데이터가 비었는가 ?
	//
	// Parameters: 없음.
	// Return: (bool)true, false
	/////////////////////////////////////////////////////////////////////////
	bool	isEmpty(void);


	/////////////////////////////////////////////////////////////////////////
	// CPacket 포인터 데이타 넣음.
	//
	// Parameters: (DATA)데이타.
	// Return: (bool) true, false
	/////////////////////////////////////////////////////////////////////////
	bool	Put(DATA Data)
	{

	}

	/////////////////////////////////////////////////////////////////////////
	// 데이타 빼서 가져옴.
	//
	// Parameters: (DATA *) 뽑은 데이터 넣어줄 포인터
	// Return: (bool) true, false
	/////////////////////////////////////////////////////////////////////////
	bool	Get(DATA *pOutData)
	{

	}

private:
	CMemoryPool<st_NODE>	*_pMemoryPool;

	long					_lUseSize;

	st_END_NODE			*_pHead;
	st_END_NODE			*_pTail;

	__int64				_iUniqueNumHead;
	__int64				_iUniqueNumTail;
};

#endif